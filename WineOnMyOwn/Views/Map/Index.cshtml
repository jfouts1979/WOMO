@model WineOnMyOwn.Models.SampleViewModel
@{
    Layout = null;
}
<!-- CSS Includes -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">

<div class="col-lg-7" id="dvMap" style="height:250px;"> </div>

@*<div class="form-group">
        <div class="col-lg-9 col-md-8">
            @Html.EditorFor(model => model.Lat, new { htmlAttributes = new { @class = "form-control", @placeholder = "Latitude" } })
            @Html.ValidationMessageFor(model => model.Lat, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-lg-9 col-md-8">
            @Html.EditorFor(model => model.Long, new { htmlAttributes = new { @class = "form-control", @placeholder = "Longitude" } })
            @Html.ValidationMessageFor(model => model.Long, "", new { @class = "text-danger" })
        </div>
    </div>*@

@*</div>*@

@*<div id="map_canvas"></div>*@
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCV9jnDSFNYrVPOdqVukVUU3WpALVBTTx8&callback=initMap" async defer></script>



<script type="text/javascript">
    function initMap() {
        //map..
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: {
                lat: 38.328732,
                lng: -85.764771
            },
            zoom: 9
        });
        //marker..
        var marker = new google.maps.Marker({
            position: {
                lat: 38.328732,
                lng: -85.764771
            },
            map: map,
            draggable: true
            
        });

        //var locationList = new Array(‘40.756012, -73.972614’, ‘40.456012, -73.796087’, ‘40.456012, -73.456807’);

        //for (var i = 0; i < locationList.length; i++) {
        //    var args = locationList[i].split(',');
        //    var location = new google.maps.LatLng(args[0], args[1]);
        //    var marker = new google.maps.Marker({
        //    position: location,
        //        map: map
        //    });

        //dragend event of marker
        google.maps.event.addListener(marker, 'dragend', function () {
            var Lats = marker.getPosition().lat();
            var Longs = marker.getPosition().lng();

            $('#Lat').val(Lats);
            $('#Long').val(Longs);

        });
    }
</script>

@*<script type="text/javascript">


        $(document).ready(function () {
            Initialize();
        });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Louisville = new google.maps.LatLng(38.328732, -85.764771);
        
        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 8,
            center: Louisville,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // a sample list of JSON encoded data of places to visit in Tunisia
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = [
            {"GeoLong": "38.9592", "GeoLat": "-85.8432"},
            {"GeoLong": "38.6056", "GeoLat": "-86.1011"}

        ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                //'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


</script>*@